Factor Analysis

Using SAS

*  factor analysis   using  principal components ;
* consumer's survey ;

data a(type=corr); _type_ = 'corr'; 
input _name_ $ taste worth flavor gsnack penergy;
cards;
taste 1.00  . . . .
worth 0.02 1.00  . . .
flavor 0.96 0.13 1.00  . .
gsnack 0.42 0.71 0.50 1.00  .
penergy 0.01 0.85 0.11 0.79 1.00
;
run ;

proc print data=a; run;

ods graphics on ;
proc factor data=a ev plots=all ;
run;
ods graphics off ;

Using R (요인분석에 관한 이론적 배경)

e1 <- matrix(c(0.33145,0.46016,0.38206,0.55598,0.47256),5,1) ; e1
e2 <- matrix(c(0.60722,-0.39003,0.55651,-0.07806,-0.40419),5,1) ; e2
evec <- cbind(e1,e2) ; evec
eval <- diag(c(sqrt(2.85309042),sqrt(1.80633245))) ; eval
evec%*%eval

mfec <- evec%*%eval
mfec
100*mfec[4,1]^2/sum(mfec[,1]^2)
100*mfec[1,2]^2/sum(mfec[,2]^2)

Using SAS

* varimax rotation ;

ods graphics on ;
proc factor data=a ev rotate=varimax plots=all; run;
ods graphics off ;









Discriminant Analysis

Using SAS

options ls=58 ps=72;

/*-------------------------------------------------------------
Detecting ailing financial and business establishments is 
an important function of audit and control. 

Systematic failure to do audit and control can lead to grave consequences, 
such as the savings-and-loan fiasco of the 1980s in the US. 

 the operating financial ratios of 33 firms that went bankrupt
after 2 years and the 33 that remained solvent during the same period. 

The three financial ratios available for each form were:


X1 = Retained Earnings/Total assets (보유소득/전체자산)

X2 = Earnings before Interest and Taxes/Total assets (소득(세전)/전체자산)

X3 = Sales/Total assets (매출/전체자산)

The response variable is defined as 

Y = 0,     if bankrupt after two years (파산기업)
1,     if solvent after 2 years (정상기업)

----------------------------------------------------------*/
data Bankrupt;
  input id Y X1 X2 X3 ;
cards;
1   0 -62.8 -89.5 1.7 
2   0 3.3 -3.5 1.1 
3   0 -120.8 -103.2 2.5 
4   0 -18.1 -28.8 1.1 
5   0 -3.8 -50.6 0.9 
6   0 -61.2 -56.2 1.7 
7   0 -20.3 -17.4 1.0 
8   0 -194.5 -25.8 0.5 
9   0 20.8 -4.3 1.0 
10  0 -106.1 -22.9 1.5 
11  0 -39.4 -35.7 1.2 
12  0 -164.1 -17.7 1.3 
13  0 -308.9 -65.8 0.8 
14  0 7.2 -22.6 2.0 
15  0 -118.3 -34.2 1.5 
16  0 -185.9 -280.0 6.7 
17  0 -34.6 -19.4 3.4 
18  0 -27.9 6.3 1.3 
19  0 -48.2 6.8 1.6 
20  0 -49.2 -17.2 0.3 
21  0 -19.2 -36.7 0.8 
22  0 -18.1 -6.5 0.9 
23  0 -98.0 -20.8 1.7 
24  0 -129.0 -14.2 1.3 
25  0 -4.0 -15.8 2.1 
26  0 -8.7 -36.3 2.8 
27  0 -59.2 -12.8 2.1 
28  0 -13.1 -17.6 0.9 
29  0 -38.0 1.6 1.2 
30  0 -57.9 0.7 0.8 
31  0 -8.8 -9.1 0.9 
32  0 -64.7 -4.0 0.1 
33  0 -11.4 4.8 0.9 
34  1 43.0 16.4 1.3 
35  1 47.0 16.0 1.9 
36  1 -3.3 4.0 2.7 
37  1 35.0 20.8 1.9 
38  1 46.7 12.6 0.9 
39  1 20.8 12.5 2.4 
40  1 33.0 23.6 1.5 
41  1 26.1 10.4 2.1 
42  1 68.6 13.8 1.6 
43  1 37.3 33.4 3.5 
44  1 59.0 23.1 5.5 
45  1 49.6 23.8 1.9 
46  1 12.5 7.0 1.8 
47  1 37.3 34.1 1.5 
48  1 35.3 4.2 0.9 
49  1 49.5 25.1 2.6 
50  1 18.1 13.5 4.0 
51  1 31.4 15.7 1.9 
52  1 21.5 -14.4 1.0 
53  1 8.5 5.8 1.5 
54  1 40.6 5.8 1.8 
55  1 34.6 26.4 1.8 
56  1 19.9 26.7 2.3 
57  1 17.4 12.6 1.3 
58  1 54.7 14.6 1.7 
59  1 53.5 20.6 1.1 
60  1 35.9 26.4 2.0 
61  1 39.4 30.5 1.9 
62  1 53.1 7.1 1.9 
63  1 39.8 13.8 1.2 
64  1 59.5 7.0 2.0 
65  1 16.3 20.4 1.0 
66  1 21.7 -7.8 1.6 
;
run;


*   pool=yes means "linear discriminant function"  ;
*   priors=equal  means  equal priority  ;
*   outstat saves the discrminant function for future use;
*   crossvalidate means to use entire data for cross-validation;

proc discrim crossvalidate outstat=dis_func pool=yes;
class y;
var x1 x2 x3;
priors equal;
run;

proc print data=dis_func;  
run;

data new; input id y x1 x2 x3; cards;
67 . 20 5.5 1.5
68 . -20 4.5 1.0
69 . 22 2.7 1.8
70 . 28 3.3 2.0
;
run ;

/* 새로운 data에 대해 기존의 data에서 나온 LDF를 가지고 판별분석 실시 */
 
proc discrim data=dis_func testdata=new testlist;
class y; 
run; 

Using R

# 판별기준 확인

> bankrupt <- read.table("C:/Users/gkrtod/Desktop/다변량/Bankrupt.txt",sep="",header=T)
> bankrupt
> ldf.bank <- c(0.00406+0.02409,0.05390-0.01561,2.84403-1.50478)
> ldf.bank
> c <- -1.63581+3.24228 ; c
> m1 <- colMeans(bankrupt[1:33,-(1:2)]) ; m1
> m2 <- colMeans(bankrupt[34:66,-(1:2)]) ; m2
> ldf.bank <- matrix(ldf.bank,3,1) ; ldf.bank
> m1%*%ldf.bank
> m2%*%ldf.bank

